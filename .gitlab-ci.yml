stages:
  - test
  - build
  - deploy

test:
  stage: test
  image: python3:latest
  script:
    - python3 -m pip install -U pip
    - python3 -m pip install -r requirements.txt

build:
  image: docker:latest
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - docker:dind
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker buildx create --name multiarch-builder --use
    - docker buildx build --push \
      --platform linux/arm64,linux/amd64,linux/arm/v7 \
      --tag "$CI_REGISTRY_IMAGE${tag}" .
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker container rm -f it-ggi
    - docker run -d -p 5000:5000 \
      --name it-ggi \
      --restart always \
      -e DATABASE_URL=$DATABASE_URL \
      -v ./log:/app/log \
      $IMAGE_NAME
    - docker ps -a

